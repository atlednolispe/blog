1.
问题描述: 增加搜索功能

解决方案:
# blog/epsilon/views.py
class PostIndexView(BasePostView):
    def get_queryset(self):  # 获取get的query参数返回经过filter的数据
        query = self.request.GET.get('query')
        qs = BasePostView.get_queryset(self)

        if query:
            qs = qs.filter(title__icontains=query)
        return qs

    def get_context_data(self, **kwargs):  # 对查询的分页传递query参数,否则除首页外无法filter
        query = self.request.GET.get('query')
        return super().get_context_data(query=query)

# blog/templates/themes/html5up/solid_state/elements.html
# 分页href中增加query查询参数
<li><a href="?page=1&query={{ query }}" class="button big previous">1</a></li>

2.
问题描述: 搜索功能改成post

解决方案:
class-based view中通过post方法处理
# TODO(altednolispe) To be done.

3.
问题描述: XSS攻击

页面中可以通过用户输入渲染html或者js之类的内容会导致XSS攻击,小心!

解决方案:
# 插件 EditThisCookie 可以手动修改cookies
# TODO(altednolispe) To be done.

4.
问题描述: 在post提交时未正确生成实例属性,如何在view中为实例增加属性

# blog/comment/forms.py
class CommentForm(forms.ModelForm):
    ...
    class Meta:
        model = Comment
        fields = ['nickname', 'email', 'website', 'content']

# request.path只记录本次请求的地址,上一次的请求不作记录
class CommentView(TemplateView):
    ...
    def post(self, request, *args, **kwargs):
        comment_form = CommentForm(request.POST)
        if comment_form.is_valid():
            comment = comment_form.save()

原因:
# 生成实例存入数据库时只传递fields中的字段,即使request.POST.data中存在额外的参数也不用于构造新实例
comment_form = CommentForm(request.POST)
if comment_form.is_valid():
    comment = comment_form.save(commit=False)

解决方案:
# blog/comment/views.py
# 通过form.save()向数据库存储新对象时设置参数commit=False,可以生成新实例,以便在view中更改对象属性
# request.path只记录本次请求的地址,上一次的请求不作记录
class CommentView(TemplateView):
    ...
    def post(self, request, *args, **kwargs):
        comment_form = CommentForm(request.POST)
        if comment_form.is_valid():
            comment = comment_form.save(commit=False)
            comment.target = request.POST.get('target')
            comment.save()
            succeed = True
        else:
            succeed = False

        extra_context = {
            'succeed': succeed,
            'form': comment_form,
        }

        context = self.get_context_data(**kwargs)
        context.update(extra_context)
        return self.render_to_response(context)

# blog/templates/themes/html5up/comment/result.html
<form action="{% url "comment:index" %}" method="post">
    {% csrf_token %}
    <input type="hidden" name="target" value="{{ request.path }}">
    {{ comment_form }}
    <div class="12u$" style="margin-top: 10px">
        <ul class="actions">
            <li><input type="submit" value="起飞" class="special"/></li>
        </ul>
    </div>
</form>

5.
问题描述: 在问题4中,评论详情页面是url是通过html中的hidden数据来提交,可以手动篡改这个值,如何修改

原因:
post.path只记录当前请求的路径,无法正确获得前一请求的路径,hidden可以在浏览器中手动更改

解决方案:
# TODO(altednolispe) To be done.

6.
问题描述: 通过forms.ModelForm定制来修改表单

解决方案:
# blog/comment/forms.py
class CommentForm(forms.ModelForm):
    nickname = forms.CharField(
        required=False,
        label='昵称',
        max_length=50,
        widget=forms.widgets.TextInput(),
        empty_value='匿名',
    )
    target = forms.CharField(max_length=100, widget=forms.widgets.HiddenInput)  # 对表单字段进行定制
    content = forms.CharField(label="内容", widget=forms.widgets.Textarea(attrs={'rows': 6, 'cols': 80}))
    ...
        class Meta:
        model = Comment
        fields = ['target', 'nickname', 'email', 'website', 'content']

# blog/epsilon/views.py
class PostView(CommonMixin, DetailView):
    ...
    def get_context_data(self, **kwargs):
        kwargs.update({
            'comment_form': CommentForm(initial={'target': self.request.path}),  # 渲染表单时提供初始数据
        })
        return super().get_context_data(**kwargs)

6.
问题描述: 分离评论

解决方案:
# 分离form部分的html,在其他页面中{% include '../comment/block.html' %}引入
# 在页面对应的view中修改get_context_data方法增加传递的上下文参数

# blog/config/views.py
from comment.forms import CommentForm
...
class LinkView(CommonMixin, ListView):
    ...
    def get_context_data(self, **kwargs):  # 否则页面中不渲染form
        kwargs.update({
            'comment_form': CommentForm(),
        })
        return super().get_context_data(**kwargs)

# blog/templates/themes/html5up/solid_state/links.html
...
{% block comment_block %}
    {% include '../comment/block.html' %}
{% endblock %}

# blog/templates/themes/html5up/comment/block.html
<section>
    <form action="{% url "comment:index" %}" method="post">
        {% csrf_token %}
        <input name="target" type="hidden" value="{{ request.path }}">
        {{ comment_form }}
        <div class="12u$" style="margin-top: 10px">
            <ul class="actions">
                <li><input type="submit" value="起飞" class="special"/></li>
            </ul>
        </div>
    </form>
</section>

7.
问题描述: 创建基类来使评论表单以及对应页面评论的展示模块化

解决方案:
# blog/comment/views.py
class CommentShowMixin:
    def get_comments(self):
        target = self.request.path
        comments = Comment.objects.filter(target=target).order_by('-id')
        return comments

    def get_context_data(self, **kwargs):
        kwargs.update({
            'comment_form': CommentForm(),
            'comment_list': self.get_comments(),
        })
        return super().get_context_data(**kwargs)

# blog/epsilon/views.py
from comment.views import CommentShowMixin
...

class PostView(CommonMixin, CommentShowMixin, DetailView):
    model = Post
    template_name = 'solid_state/generic.html'

# blog/templates/themes/html5up/comment/block.html
<section>
    ...

    <div class="show_comments">
    {% for comment in comment_list %}
        <div>
            <h4 class="major"><a href="{{ comment.website }}">{{ comment.nickname }} - {{ comment.created_time }}</a></h4>
            <p>{{ comment.content }}</p>
        </div>
    {% endfor %}
    </div>

</section>

8.
问题描述: 将comment的部分用template tag改写

解决方案:
# TODO(atlednolispe) To be done.

9.
问题描述: 限制页面请求的方法

解决方案:
# blog/comment/views.py
class CommentView(TemplateView):
    ...
    http_method_names = ('post',)

10.
问题描述: Markdown展示文章

解决方案:
# (django20) atlednolispedeMBP:blog atlednolispe$ pip3 install Markdown

# blog/epsilon/models.py
import markdown

class Post(models.Model):
    ...
    is_markdown = models.BooleanField(verbose_name="使用markdown格式", default=True)
    content_html = models.TextField(verbose_name="markdown渲染后的数据", default='')

    def save(self, *args, **kwargs):
        if self.is_markdown:
            self.content_html = markdown.markdown(self.content)

        return super().save(*args, **kwargs)

# blog/templates/themes/html5up/solid_state/generic.html
{% autoescape off %}
<div>{{ post.content_html }}</div>
{% endautoescape %}

11.
问题描述: Markdown美化

解决方案:
# blog/epsilon/models.py
class Post(models.Model):
    ...
    def save(self, *args, **kwargs):
        if self.is_markdown:
            config = {
                'codehilite': {
                    'use_pygments': False,
                    'css_class': 'prettyprint linenums',
                }
            }
            self.content_html = markdown.markdown(self.content, extensions=['codehilite'], extension_configs=config)

        return super().save(*args, **kwargs)

# 使用google/code-prettify支持markdown
# 但好像在不同的markdown语法之间要用#分割不然会有代码乱码
# https://github.com/google/code-prettify
# blog/templates/html5up/solid_state/generic.html
{% block head_block %}
    <link href="{% static "google-code-prettify/skins/desert.css" %}" rel="stylesheet">
{% endblock %}

{% block javascript %}
    <script src="{% static "google-code-prettify/prettify.js" %}"></script>
    <script>
    window.onload = function () {
        PR.prettyPrint();
    }
    </script>
{% endblock %}

# blog/static/custom/code-pretty.css
# 美化代码显示格式
pre code {
    padding: 0px;
}

code {
    background: none;
    border: none;
}

11.
问题描述: markdown所见即所得

解决方案:
# ace前端编辑器 https://ace.c9.io

12.
问题描述: 访问量统计

统计方法:
1. 访问实时统计
2. 访问延迟处理 celery
3. 页面增加js或者js使用<img />统计
4. 分析ngnix日志

难点:
1. 同时访问pv会丢失

2. uv判断
(1) redis/共享内存
# gloabl_variable = {
#     'id': '2018/02/20 18:00:00'
# }
#
# if id in gloabl_variable:
#     if now - gloabl_variable[id] > 1 day:
#         count += 1
#         gloabl_variable[id] = now
# else:
#     gloabl_variable[id] = now

(2) cookie
# 但要对每个页面都记录可能cookie overflow

解决方案:
1. 使用数据库的数据更新操作替换python层的更新解决同时访问pv会丢失的情况

# blog/epsilon/models.py
from django.db.models import F

class Post(models.Model):
    ...
    pv = models.PositiveIntegerField(default=0, verbose_name="pv")
    uv = models.PositiveIntegerField(default=0, verbose_name="uv")

    ...
    def increase_pv(self):
        return type(self).objects.filter(id=self.id).update(pv=F('pv') + 1)

    def increase_uv(self):
        return type(self).objects.filter(id=self.id).update(uv=F('uv') + 1)

# blog/epsilon/views.py
class PostView(CommonMixin, CommentShowMixin, DetailView):
    model = Post
    template_name = 'solid_state/generic.html'

    def get(self, request, *args, **kwargs):
        response = super().get(request, *args, **kwargs)  # 调用后才生成self.object
        self.pv_uv()
        return response

    def pv_uv(self):
        # self.object.pv += 1  # pv数据丢失
        # self.object.uv += 1
        # self.object.save()

        self.object.increase_pv()
        self.object.increase_uv()