1.
问题描述: 增加搜索功能

解决方案:
# blog/epsilon/views.py
class PostIndexView(BasePostView):
    def get_queryset(self):  # 获取get的query参数返回经过filter的数据
        query = self.request.GET.get('query')
        qs = BasePostView.get_queryset(self)

        if query:
            qs = qs.filter(title__icontains=query)
        return qs

    def get_context_data(self, **kwargs):  # 对查询的分页传递query参数,否则除首页外无法filter
        query = self.request.GET.get('query')
        return super().get_context_data(query=query)

# blog/templates/themes/html5up/solid_state/elements.html
# 分页href中增加query查询参数
<li><a href="?page=1&query={{ query }}" class="button big previous">1</a></li>

2.
问题描述: 搜索功能改成post

解决方案:
class-based view中通过post方法处理
# TODO(altednolispe) To be done.

3.
问题描述: XSS攻击

页面中可以通过用户输入渲染html或者js之类的内容会导致XSS攻击,小心!

解决方案:
# 插件 EditThisCookie 可以手动修改cookies
# TODO(altednolispe) To be done.

4.
问题描述: 在post提交时未正确生成实例属性,如何在view中为实例增加属性

# blog/comment/forms.py
class CommentForm(forms.ModelForm):
    ...
    class Meta:
        model = Comment
        fields = ['nickname', 'email', 'website', 'content']

# request.path只记录本次请求的地址,上一次的请求不作记录
class CommentView(TemplateView):
    ...
    def post(self, request, *args, **kwargs):
        comment_form = CommentForm(request.POST)
        if comment_form.is_valid():
            comment = comment_form.save()

原因:
# 生成实例存入数据库时只传递fields中的字段,即使request.POST.data中存在额外的参数也不用于构造新实例
comment_form = CommentForm(request.POST)
if comment_form.is_valid():
    comment = comment_form.save(commit=False)

解决方案:
# blog/comment/views.py
# 通过form.save()向数据库存储新对象时设置参数commit=False,可以生成新实例,以便在view中更改对象属性
# request.path只记录本次请求的地址,上一次的请求不作记录
class CommentView(TemplateView):
    ...
    def post(self, request, *args, **kwargs):
        comment_form = CommentForm(request.POST)
        if comment_form.is_valid():
            comment = comment_form.save(commit=False)
            comment.target = request.POST.get('target')
            comment.save()
            succeed = True
        else:
            succeed = False

        extra_context = {
            'succeed': succeed,
            'form': comment_form,
        }

        context = self.get_context_data(**kwargs)
        context.update(extra_context)
        return self.render_to_response(context)

# blog/templates/themes/html5up/comment/result.html
<form action="{% url "comment:index" %}" method="post">
    {% csrf_token %}
    <input type="hidden" name="target" value="{{ request.path }}">
    {{ comment_form }}
    <div class="12u$" style="margin-top: 10px">
        <ul class="actions">
            <li><input type="submit" value="起飞" class="special"/></li>
        </ul>
    </div>
</form>

5.
问题描述: 在问题4中,评论详情页面是url是通过html中的hidden数据来提交,可以手动篡改这个值,如何修改

原因:
post.path只记录当前请求的路径,无法正确获得前一请求的路径,hidden可以在浏览器中手动更改

解决方案:
# TODO(altednolispe) To be done.

6.
问题描述: 通过forms.ModelForm定制来修改表单

解决方案:
# blog/comment/forms.py
class CommentForm(forms.ModelForm):
    nickname = forms.CharField(
        required=False,
        label='昵称',
        max_length=50,
        widget=forms.widgets.TextInput(),
        empty_value='匿名',
    )
    target = forms.CharField(max_length=100, widget=forms.widgets.HiddenInput)  # 对表单字段进行定制
    content = forms.CharField(label="内容", widget=forms.widgets.Textarea(attrs={'rows': 6, 'cols': 80}))
    ...
        class Meta:
        model = Comment
        fields = ['target', 'nickname', 'email', 'website', 'content']

# blog/epsilon/views.py
class PostView(CommonMixin, DetailView):
    ...
    def get_context_data(self, **kwargs):
        kwargs.update({
            'comment_form': CommentForm(initial={'target': self.request.path}),  # 渲染表单时提供初始数据
        })
        return super().get_context_data(**kwargs)

6.
问题描述: 分类评论

解决方案:
# 分离form部分的html,在其他页面中{% include '../comment/block.html' %}引入
# 在页面对应的view中修改get_context_data方法增加传递的上下文参数

# blog/config/views.py
from comment.forms import CommentForm
...
class LinkView(CommonMixin, ListView):
    ...
    def get_context_data(self, **kwargs):  # 否则页面中不渲染form
        kwargs.update({
            'comment_form': CommentForm(),
        })
        return super().get_context_data(**kwargs)

# blog/templates/themes/html5up/solid_state/links.html
...
{% block comment_block %}
    {% include '../comment/block.html' %}
{% endblock %}

# blog/templates/themes/html5up/comment/block.html
<section>
    <form action="{% url "comment:index" %}" method="post">
        {% csrf_token %}
        <input name="target" type="hidden" value="{{ request.path }}">
        {{ comment_form }}
        <div class="12u$" style="margin-top: 10px">
            <ul class="actions">
                <li><input type="submit" value="起飞" class="special"/></li>
            </ul>
        </div>
    </form>
</section>
