1.
问题描述: admin替换为xadmin

解决方案:
xadmin: https://github.com/sshwsfc/xadmin

(1)安装
# 不能pip3安装,据说源有些问题
(django20) atlednolispedeMBP:blog atlednolispe$ pip3 install git+https://github.com/sshwsfc/xadmin

(django20) atlednolispedeMBP:blog atlednolispe$ rm blog/custom_site.py blog/custom_admin.py

(django20) atlednolispedeMBP:blog atlednolispe$ python3 manage.py makemigrations
(django20) atlednolispedeMBP:blog atlednolispe$ python3 manage.py migrate

# blog/blog/settings/base.py
INSTALLED_APPS = [
    ...
    'xadmin',
    'crispy_forms',
    'reversion',
]

# blog/blog/settings/development.py
TEMPLATES = [
         'DIRS': [
             ...
             os.path.join(SITE_PACKAGES, 'xadmin/templates'),
         ],
]

# blog/blog/urls.py
...
import xadmin
from xadmin.plugins import xversion

from blog import adminx

xadmin.autodiscover()
xversion.register_models()  # revision & widget

urlpatterns = [
    path('', IndexView.as_view(), name='index'),
    path('blog/', include('epsilon.urls')),
    path('config/', include('config.urls')),
    path('comment/', include('comment.urls')),
    path('admin/', xadmin.site.urls),  # admin & custom_admin removed
]

# blog/blog/adminx.py
class BaseOwnerAdmin:
    """
    针对有owner属性的数据, 重写:
    1. save_model - 保证每条数据属于当前用户
    2. get_queryset- 保证每个用户只能看到自己的文章
    """
    def get_list_queryset(self):  # get_query_set(self, request) --> get_list_queryset(self)
        request = self.request

        qs = super().get_list_queryset()
        if request.user.is_superuser:
            return qs
        return qs.filter(owner=request.user)

    def save_models(self):  # save_model(self, request, obj, form, change) --> save_models(self)
        obj.owner = self.request.user
        super().save_models()

# blog/epsilon/adminx.py
import xadmin

from django.utils.html import format_html
from django.urls import reverse
from xadmin.layout import Fieldset, Row

from blog.adminx import BaseOwnerAdmin

from .models import Post, Category, Tag
from .adminforms import TagAdminForm


class PostAdmin(BaseOwnerAdmin):
    list_display = (
        'title', 'category', 'show_tags', 'status',
        'pv', 'uv', 'created_time', 'operator'
    )
    search_fields = ('title', 'category__name')

    list_filter = ('category',)
    save_on_top = True
    date_hierarchy = 'created_time'  # 时间的层级filter

    form_layout = (
        Fieldset(
            ('基础配置', {
                'fields': (Row('title', 'category'), 'is_markdown',
                           'content', 'desc')
            }),
            # TODO(atlednolispe) 隐藏配置失效。
            # ('高级配置', {  # post can't be showed
            #     'classes': ('collapse',),  # 点击一次才展示
            #     'fields': ('tags',)
            # }),
        )
    )

    filter_horizontal = ('tags', )  # 左右箭头挑选

    def operator(self, obj):
        return format_html(
            '<a href="{}">编辑</a>',
            reverse('custom_site:epsilon_post_change', args=(obj.id,))
        )
    operator.short_description = '操作'
    operator.empty_value_display = '???'  # 空值的默认展示


xadmin.site.register(Post, PostAdmin)  # change decorator to site.register


class CategoryAdmin(BaseOwnerAdmin):
    list_display = ('name', 'status', 'is_nav', 'created_time')
    fields = ('name', 'status', 'is_nav')


xadmin.site.register(Category, CategoryAdmin)


class TagAdmin(BaseOwnerAdmin):
    form = TagAdminForm
    fields = ('name', 'status', 'desc')
    list_display = ('name', 'status', 'desc', 'created_time')


xadmin.site.register(Tag, TagAdmin)

# blog/blog/settings/development.py
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            ...
            os.path.join(SITE_PACKAGES, 'xadmin/templates'),
            os.path.join(SITE_PACKAGES, 'crispy_forms/templates'),
            os.path.join(SITE_PACKAGES, 'reversion/templates'),
        ],
    },
]

2.
问题描述: admin修改或者新建post报错: 请修正下面的错误。

原因:
将Post所有字段在admin页面展示后发现markdown渲染后的content_html字段为必填项,修改model中字段属性blank=True

解决方案:
# epsilon/models.py
class Post(models.Model):
    ...
    content_html = models.TextField(verbose_name="markdown渲染后的数据", default='', blank=True)

3.
问题描述: 修改admin的title&footer

解决方案:
# ref: xadmin/views/base.py -> class CommonAdminView,重新方法来定制admin
# blog/blog/adminx.py
import xadmin

from xadmin.views import CommAdminView


class GlobalSetting(CommAdminView):
    site_title = 'Epsilon Delta'
    site_footer = 'power by atlednolispe'


xadmin.site.register(CommAdminView, GlobalSetting)

4.
问题描述: 外键数据过多导致页面加载过慢

解决方案:
# django-autocomplete-light定制API

(django20) atlednolispedeMBP:blog atlednolispe$ pip3 install django-autocomplete-light

# blog/blog/settings/base.py
INSTALLED_APPS = [
    ...
    'dal',
    'dal_select2',
]

# blog/blog/autocomplete.py
from dal import autocomplete

from epsilon.models import Category, Tag


class CategoryAutocomplete(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        if not self.request.user.is_authenticated:  # is_authenticated from method to attribute by property
            return Category.objects.none()

        qs = Category.objects.all()

        if self.q:
            qs = qs.filter(name__icontains=self.q)
        return qs


class TagAutocomplete(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        if not self.request.user.is_authenticated:
            return Tag.objects.none()

        qs = Tag.objects.all()

        if self.q:
            qs = qs.filter(title__istartswith=self.q)
        return qs


# blog/blog/adminforms.py
from dal import autocomplete

from .models import Category, Tag


class PostAdminForm(forms.ModelForm):
    desc = forms.CharField(widget=forms.Textarea, label='摘要', required=False)
    category = forms.ModelChoiceField(
        queryset=Category.objects.all(),  # constraint
        widget=autocomplete.ModelSelect2(url='category-autocomplete'),
        label='分类',
    )
    tags = forms.ModelMultipleChoiceField(  # ManyToMany
        queryset=Tag.objects.all(),
        widget=autocomplete.ModelSelect2Multiple(url='tag-autocomplete'),
        label='标签',
    )

# blog/blog/urls.py
from .autocomplete import CategoryAutocomplete, TagAutocomplete

urlpatterns = [
    ...
    path('category-autocomplete/', CategoryAutocomplete.as_view(), name='category-autocomplete'),
    path('tag-autocomplete/', TagAutocomplete.as_view(), name='tag-autocomplete'),
]

# blog/epsilon/adminx.py
from .adminforms import PostAdminForm, TagAdminForm


class PostAdmin(BaseOwnerAdmin):
    form = PostAdminForm

4.
问题描述: 增加富文本编辑器(CKEditor)

解决方案:
# blog/blog/settings/base.py
INSTALLED_APPS = [
    ...
    'ckeditor',
]

# blog/blog/settings/development.py
TEMPLATES = [
    {
        ...
        'DIRS': [
            ...
            os.path.join(SITE_PACKAGES, 'ckeditor/templates'),
        ],
    }
]

CKEDITOR_CONFIGS = {
    'awesome_ckeditor': {  # set the name of the config
        'toolbar': 'Full',
        'height': 300,
        # 'width': 1200,
    },
}

# blog/epsilon/adminforms.py
from ckeditor.fields import CKEditorWidget


class PostAdminForm(forms.ModelForm):
    content = forms.CharField(widget=CKEditorWidget(config_name='awesome_ckeditor'), label='内容')

# blog/epsilon/models.py
class Post(models.Model):
    ...
    def save(self, *args, **kwargs):
        if self.is_markdown:
            ...
        else:
            self.content_html = self.content

4.
问题描述: CKEditor图片上传

解决方案:
# ref: django/contrib/staticfiles/urls.py

# blog/blog/settings/base.py
INSTALLED_APPS = [
    ...
    'ckeditor_uploader',
]

# blog/blog/settings/development.py
TEMPLATES = [
    {
        ...
        'DIRS': [
            ...
            os.path.join(SITE_PACKAGES, 'ckeditor_uploader/templates'),
        ],
    }
]

TEMPLATE_DIRS = (os.path.join(BASE_DIR,  'templates'),)

MEDIA_URL = '/media/'  # Absolute filesystem path to the directory that will hold user-uploaded files.

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

CKEDITOR_UPLOAD_PATH = 'article_images'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/tmp/django_cache',
    }
}

CKEDITOR_CONFIGS = {
    'awesome_ckeditor': {  # set the name of the config
        'toolbar': 'Full',
        'height': 300,
        # 'width': 1200,
        'tabSpaces': 4,
    },
}

# blog/blog/urls.py
from ckeditor_uploader import urls as ckeditor_uploader_urls
from django.conf import settings
from django.conf.urls.static import static  # collect staticfiles
...


urlpatterns = (
    [
        ...
        path('category-autocomplete/', CategoryAutocomplete.as_view(), name='category-autocomplete'),
        path('tag-autocomplete/', TagAutocomplete.as_view(), name='tag-autocomplete'),
    ]
    + ckeditor_uploader_urls.urlpatterns
    + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
)  # url is likely to be deprecated in a future release.

# blog/blog/adminforms.py
from ckeditor_uploader.widgets import CKEditorUploadingWidget
...


class PostAdminForm(forms.ModelForm):
    content = forms.CharField(widget=CKEditorUploadingWidget(config_name='awesome_ckeditor'), label='内容')
    ...

5.
问题描述: CKEditor图片上传加水印

解决方案:
# blog/blog/settings/development.py
...
DEFAULT_FILE_STORAGE = 'blog.storage.MyStorage'

# blog/blog/storage.py
from django.core.files.storage import FileSystemStorage
from django.core.files.uploadedfile import InMemoryUploadedFile
from django.utils.six import StringIO
from PIL import Image, ImageDraw, ImageFont


class MyStorage(FileSystemStorage):
    font_path = '/Applications/Utilities/Console.app/Contents/Resources/Fonts/SFMono-Regular.otf'

    def save(self, name, content, max_length=None):
        if 'image' in content.content_type:
            # 加水印
            image = self.watermark_with_text(content, 'atlednolispe', 'green')
            content = self.convert_image_to_file(image, name)

        return super(MyStorage, self).save(name, content, max_length=max_length)

    def convert_image_to_file(self, image, name):
        temp = StringIO()
        image.save(temp, format='PNG')
        return InMemoryUploadedFile(temp, None, name, 'image/png', temp.len, None)

    def watermark_with_text(self, file_obj, text, color, fontfamily=font_path):
        image = Image.open(file_obj).convert('RGBA')
        imageWatermark = Image.new('RGBA', image.size, (255, 255, 255, 0))

        draw = ImageDraw.Draw(imageWatermark)
        width, height = image.size
        margin = 10
        font = ImageFont.truetype(fontfamily, int(height / 20))
        textWidth, textHeight = draw.textsize(text, font)
        x = (width - textWidth - margin) / 2
        y = height - textHeight - margin

        draw.text((x, y), text, color, font)

        return Image.alpha_composite(image, imageWatermark)

6.
问题描述: PIL处理水印失败

解决方案:
Internal Server Error: /upload/
Traceback (most recent call last):
  File "/Users/atlednolispe/.virtualenvs/django20/lib/python3.6/site-packages/django/core/handlers/exception.py", line 35, in inner
    response = get_response(request)
  File "/Users/atlednolispe/.virtualenvs/django20/lib/python3.6/site-packages/django/core/handlers/base.py", line 128, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/Users/atlednolispe/.virtualenvs/django20/lib/python3.6/site-packages/django/core/handlers/base.py", line 126, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/Users/atlednolispe/.virtualenvs/django20/lib/python3.6/site-packages/django/contrib/auth/decorators.py", line 21, in _wrapped_view
    return view_func(request, *args, **kwargs)
  File "/Users/atlednolispe/.virtualenvs/django20/lib/python3.6/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/atlednolispe/.virtualenvs/django20/lib/python3.6/site-packages/django/views/generic/base.py", line 69, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/atlednolispe/.virtualenvs/django20/lib/python3.6/site-packages/django/views/generic/base.py", line 89, in dispatch
    return handler(request, *args, **kwargs)
  File "/Users/atlednolispe/.virtualenvs/django20/lib/python3.6/site-packages/ckeditor_uploader/views.py", line 94, in post
    saved_path = self._save_file(request, uploaded_file)
  File "/Users/atlednolispe/.virtualenvs/django20/lib/python3.6/site-packages/ckeditor_uploader/views.py", line 132, in _save_file
    saved_path = default_storage.save(filename, uploaded_file)
  File "/Users/atlednolispe/atlednolispe/Projects/PycharmProjects/blog/blog/storage.py", line 14, in save
    content = self.convert_image_to_file(image, name)
  File "/Users/atlednolispe/atlednolispe/Projects/PycharmProjects/blog/blog/storage.py", line 20, in convert_image_to_file
    image.save(temp, format='PNG')
  File "/Users/atlednolispe/.virtualenvs/django20/lib/python3.6/site-packages/PIL/Image.py", line 1930, in save
    save_handler(self, fp, filename)
  File "/Users/atlednolispe/.virtualenvs/django20/lib/python3.6/site-packages/PIL/PngImagePlugin.py", line 731, in _save
    fp.write(_MAGIC)
TypeError: string argument expected, got 'bytes'
[23/Feb/2018 21:16:36] "POST /upload/?CKEditor=id_content&CKEditorFuncNum=1&langCode=zh-cn HTTP/1.1" 500 109836

原因: _MAGIC为b"\211PNG\r\n\032\n",是字节,应该将StringIO改为BytesIO

解决方案:
# blog/blog/storage.py
from django.utils.six import BytesIO

...
class MyStorage(FileSystemStorage):
    ...
    def convert_image_to_file(self, image, name):
        temp = BytesIO()
        image.save(temp, format='PNG')
        return InMemoryUploadedFile(temp, None, name, 'image/png', None, None)
