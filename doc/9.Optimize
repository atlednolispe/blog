1.
问题描述: logger写入日志

解决方案:
# blog/blog/settings/base.py
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'brief': {
            'format': '%(asctime)s %(levelname)-8s %(name)-15s %(message)s'
        }
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.dirname(BASE_DIR) + '/log/debug.log',
        },
        'console': {
            'level': 'DEBUG',
            'formatter': 'brief',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.dirname(BASE_DIR) + '/log/debug.log',
        }
    },
    'loggers': {
        '': {  # root
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,  # propagate to root if True
        },
    },
}

# blog/epsilon/views.py
import logging


logger = logging.getLogger(__name__)


class PostIndexView(BasePostView):
    def get_queryset(self):
        query = self.request.GET.get('query')
        logger.info('query: [%s]', query)
        qs = BasePostView.get_queryset(self)

        if query:
            qs = qs.filter(title__icontains=query)
        logger.debug('query result: [%s]', qs)
        return qs

2.
问题描述: code执行时间统计

解决方案:
import cProfile, pstats
import time

from django.utils.six import StringIO


def time_it(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        print(func.__name__, 'cost', time.time() - start)
        return result
    return wrapper


# profile 1
def loop(count):
    result = []
    for i in range(count):
        result.append(i)


cProfile.run('loop(1000)')


# profile 2
pr = cProfile.Profile()

pr.enable()
loop(100000)  # test code
pr.disable()


s = StringIO.StringIO()
# sortby = 'cumulative'
sortby = 'tottime'
ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
ps.print_stats()
print(s.getvalue())

3.
问题描述: 对系统通过django-debug-toolbar进行性能检查

解决方案:
# blog/blog/settings/development.py
INSTALLED_APPS += [
    'debug_toolbar',
]

MIDDLEWARE += [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

INTERNAL_IPS = ['127.0.0.1']

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            ...
            os.path.join(SITE_PACKAGES, 'debug_toolbar/templates'),
        ]
    }
]

# blog/blog/urls.py
if settings.DEBUG:
    import debug_toolbar
    urlpatterns = [
        path('__debug__/', include(debug_toolbar.urls)),
    ] + urlpatterns